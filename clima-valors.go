package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

var municipi = "08001" //Definim el municipi per la consulta dels valors climatologics
var apiKey = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJvZGlnaW9jaW9AZ21haWwuY29tIiwianRpIjoiYjRlZTViMjctZDhhMS00YmIxLWFiZjgtYmFjYTViOTc5ZDhjIiwiaXNzIjoiQUVNRVQiLCJpYXQiOjE2NzU2MTY3OTIsInVzZXJJZCI6ImI0ZWU1YjI3LWQ4YTEtNGJiMS1hYmY4LWJhY2E1Yjk3OWQ4YyIsInJvbGUiOiIifQ.y-WKC8DkAJ4O__aNkvWS60AwmYl6dVHcBZKcowfmNKs"

type PreUrl struct {
	Url    string       `json:"datos"` //Definim que el camp Url sera de tipus igual que el item "datos" del Json obtingut
	Client *http.Client //Aquest camp ens servirà per quan realitzem testing, tindrem enmagatzemat aqui el tipus de crida que s'ha realitzat
}

type AutoGenerated []struct {
	Origen     Origen     `json:"origen"`
	Elaborado  string     `json:"elaborado"`
	Nombre     string     `json:"nombre"`
	Provincia  string     `json:"provincia"`
	Prediccion Prediccion `json:"prediccion"`
	ID         int        `json:"id"`
	Version    float64    `json:"version"`
}
type Origen struct {
	Productor string `json:"productor"`
	Web       string `json:"web"`
	Enlace    string `json:"enlace"`
	Language  string `json:"language"`
	Copyright string `json:"copyright"`
	NotaLegal string `json:"notaLegal"`
}
type ProbPrecipitacion struct {
	Value   int    `json:"value"`
	Periodo string `json:"periodo"`
}
type CotaNieveProv struct {
	Value   string `json:"value"`
	Periodo string `json:"periodo"`
}
type EstadoCielo struct {
	Value       string `json:"value"`
	Periodo     string `json:"periodo"`
	Descripcion string `json:"descripcion"`
}
type Viento struct {
	Direccion string `json:"direccion"`
	Velocidad int    `json:"velocidad"`
	Periodo   string `json:"periodo"`
}
type RachaMax struct {
	Value   string `json:"value"`
	Periodo string `json:"periodo"`
}
type Dato struct {
	Value int `json:"value"`
	Hora  int `json:"hora"`
}
type Temperatura struct {
	Maxima int    `json:"maxima"`
	Minima int    `json:"minima"`
	Dato   []Dato `json:"dato"`
}
type SensTermica struct {
	Maxima int    `json:"maxima"`
	Minima int    `json:"minima"`
	Dato   []Dato `json:"dato"`
}
type HumedadRelativa struct {
	Maxima int    `json:"maxima"`
	Minima int    `json:"minima"`
	Dato   []Dato `json:"dato"`
}
type Dia struct {
	ProbPrecipitacion []ProbPrecipitacion `json:"probPrecipitacion"`
	CotaNieveProv     []CotaNieveProv     `json:"cotaNieveProv"`
	EstadoCielo       []EstadoCielo       `json:"estadoCielo"`
	Viento            []Viento            `json:"viento"`
	RachaMax          []RachaMax          `json:"rachaMax"`
	Temperatura       Temperatura         `json:"temperatura"`
	SensTermica       SensTermica         `json:"sensTermica"`
	HumedadRelativa   HumedadRelativa     `json:"humedadRelativa"`
	UvMax             int                 `json:"uvMax,omitempty"`
	Fecha             string              `json:"fecha"`
}
type Prediccion struct {
	Dia []Dia `json:"dia"`
}
type Diaria struct { //Obtenim les diferents dades corresponents a la resposta Json i les asignem a cada un dels camps
	ProbPrecipitacio int       `json:"probPrecipitacion"`
	TemperaturaMax   int       `json:"maxima"`
	TemperaturaMin   int       `json:"minima"`
	HumitatRelativa  int       `json:"humedadRelativa"`
	Time             time.Time `json:"-"` //En aquest cas afegirem el simbol- per ignorar que no rebem aquesta dada
}

// Realitzem una funció per gestionar l'obtenció de les dades climatologiques i el primer que tenim que fer és fer referencia a el package natiu http a través del struct Prediccio
func (g *Diaria) GetPrediccions() (*Diaria, error) {
	result, _ := GetPreUrl() //Definim una funció per obtenir la Url per la petició de dades climatologiques
	valors, err := GetPrediccio(result)
	return valors, err

}

func GetPreUrl() (string, error) {
	//Definim la variable url amb el endpoint corresponent a la Predicció Especifica d'un Municipi. En aquest cas Abrera codi 08001
	url := fmt.Sprintf("https://opendata.aemet.es/opendata/api/prediccion/especifica/municipio/diaria/%s/?api_key=%s", municipi, apiKey) //Definim una variable per contenir la url a la que realitzarem la crida

	//Preparem la petició emprant el package http
	req, _ := http.NewRequest("GET", url, nil) //A on li indiquem el metode get, la url de la petició i el tercer parametyre com a nil

	//Afegim una capçelera per que no cachegi la petició
	req.Header.Add("cache-control", "no-cache")
	//Realitzem la petició emprant el metode Do i transmetent la variable req com a parametre, que conté la petició en si.
	res, err := http.DefaultClient.Do(req)
	//Controlem si és produeix un error i corresponentment err es diferent de nil
	if err != nil {
		log.Println("error contactant amb aemet.es", err)
		return "", err //Retornem un error controlat
	}

	defer res.Body.Close()                //Diferim la resposta
	body, err := ioutil.ReadAll(res.Body) //Llegim el cos de la resposta de la peticio
	if err != nil {
		log.Println("error llegint el json", err)
		return "", err //Retornem un error controlat
	}

	preUrl := PreUrl{}                  //Creem un estruct buit
	err = json.Unmarshal(body, &preUrl) //Enmagatzema el valor del body en l'estruct PreUrl
	if err != nil {
		log.Println("error unmarshalling", err)
		return "", err
	}

	return preUrl.Url, err //Retornem els valors
}

func GetPrediccio(url string) (*Diaria, error) {
	//Rebem la variable url amb el endpoint autoritzat corresponent a la Predicció Especifica d'un Municipi. En aquest cas Abrera codi 08001
	//Preparem la petició emprant el package http
	req, _ := http.NewRequest("GET", url, nil) //A on li indiquem el metode get, la url de la petició i el tercer parametyre com a nil

	//Afegim una capçelera per que no cachegi la petició
	req.Header.Add("cache-control", "no-cache")
	//Realitzem la petició emprant el metode Do i transmetent la variable req com a parametre, que conté la petició en si.
	res, err := http.DefaultClient.Do(req)
	//Controlem si és produeix un error i corresponentment err es diferent de nil
	if err != nil {
		log.Println("error contactant amb aemet.es", err)
		return nil, err //Retornem un error controlat
	}

	defer res.Body.Close()                //Diferim la resposta
	body, err := ioutil.ReadAll(res.Body) //Llegim el cos de la resposta de la peticio
	if err != nil {
		log.Println("error llegint el json", err)
		return nil, err //Retornem un error controlat
	}

	prediccio := AutoGenerated{}                    //Creem un estruct buit
	var precipitacio, tempMax, tempMin, humitat int //Inicialitzem variables per guardar els valor climatics principals que emprarem
	err = json.Unmarshal([]byte(body), &prediccio)  //Enmagatzema el valor del body en l'estruct PreUrl
	if err != nil {
		log.Println("error unmarshalling", err)
		return nil, err
	}

	//Desestructurem del objecte prediccio i asignem els valors a les quatre variables claus sobre el clima: precipitacio, tempMax, tempMin, humitat
	precipitacio, tempMax, tempMin, humitat = prediccio[0].Prediccion.Dia[0].ProbPrecipitacion[0].Value, prediccio[0].Prediccion.Dia[0].Temperatura.Maxima, prediccio[0].Prediccion.Dia[0].Temperatura.Minima, prediccio[0].Prediccion.Dia[0].HumedadRelativa.Maxima

	var currentInfo = Diaria{
		ProbPrecipitacio: precipitacio,
		TemperaturaMax:   tempMax,
		TemperaturaMin:   tempMin,
		HumitatRelativa:  humitat,
		Time:             time.Now(),
	}

	return &currentInfo, nil //Retornem un objecte nou poblat amb tota la informació estructurada
}
